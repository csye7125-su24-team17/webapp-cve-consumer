package main

import (
	"database/sql"
	"fmt"
	"log"
	"net/http"
	"os"

	"github.com/IBM/sarama"
	"github.com/csye7125-su24-team17/webapp/pkg"

	_ "github.com/lib/pq" // Importing the PostgreSQL driver package
)

func connectToDB()(*sql.DB,error){
	host := os.Getenv("db_host")
	port := os.Getenv("db_port")
	dbname := os.Getenv("db_name")
	user := os.Getenv("db_user")
	password := os.Getenv("db_password")
	connStr := fmt.Sprintf("host=%s port=%s dbname=%s user=%s password=%s sslmode=disable", host, port, dbname, user, password)
	dbConnection, err := sql.Open("postgres", connStr)
	return dbConnection,err
}
func connectConsumer()(sarama.Consumer,error){
	kafkaHost := os.Getenv("kafka_host")
	KafkaPort := os.Getenv("kafka_port")
	kafkaUrl := fmt.Sprintf("%s:%s",kafkaHost,KafkaPort)
	config:= sarama.NewConfig();
	config.Consumer.Return.Errors = true
	conn,err := sarama.NewConsumer([]string{kafkaUrl},config)
	if err != nil {
		return nil, err
	}
	return conn,nil
}
func main() {
	// Establish a connection to the PostgreSQL database
	dbConn,err := connectToDB()
	if err != nil {
		log.Fatal(err)
	}
	defer dbConn.Close()
	worker,err := connectConsumer()
	if err!=nil{
		panic(err)
	}
	kafkaTopic := os.Getenv("kafka_topic")
	partitions, err := worker.Partitions(kafkaTopic)
  if err != nil {
    log.Fatalf("Error getting partitions: %v", err)
  }
  for _, partition := range partitions {
    partitionConsumer, err := worker.ConsumePartition(kafkaTopic, partition, sarama.OffsetOldest)
    if err != nil {
      log.Fatalf("Error creating partition consumer: %v", err)
    }
    defer func() {
    	if err := partitionConsumer.Close(); err != nil {
				log.Fatalf("Error closing partition consumer: %v", err)
    	}
    }()
    go func(pc sarama.PartitionConsumer) {
      for message := range pc.Messages() {
				pkg.StoreInDb(dbConn, message.Value)
      }
    }(partitionConsumer)
  }
	http.HandleFunc("/readiness", readiness)
	http.HandleFunc("/liveness", liveness)
	go http.ListenAndServe(":8080", nil)
  select {}
}
func readiness (w http.ResponseWriter, r *http.Request){
	testConnection,err := connectToDB()
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		fmt.Println("Readiness probe failed. Unable to connect to database.")
		return
	}
	testClient,err := connectConsumer()
	if err!=nil{
		http.Error(w, err.Error(), http.StatusBadRequest)
		fmt.Println("Readiness probe failed. Unable to connect to kafka broker.")
		return
	}
	topics,err := testClient.Topics()
	if err!=nil{
		http.Error(w, err.Error(), http.StatusBadRequest)
		fmt.Println("Readiness probe failed. Unable to get kafka topics.")
		return
	}
	for _,topic := range topics {
		if topic == "cve"{
			w.WriteHeader(http.StatusOK)
			w.Write([]byte("OK"))
			fmt.Println("Readiness probe successfull with 200 status code.")
			testClient.Close()
			testConnection.Close()
			return
		}
	}
	http.Error(w, "Topic does not exist.", http.StatusBadRequest)
	fmt.Println("Readiness probe failed. Unable to find kafka topic cve.")
	testClient.Close()
	testConnection.Close()
}
func liveness (w http.ResponseWriter, r *http.Request){
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("OK"))
	fmt.Println("Liveness probe successfull with 200 status code.")
}